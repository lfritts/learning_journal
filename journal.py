# -*- coding: utf-8 -*-
from flask import Flask, g, render_template, abort, request, url_for
from flask import redirect, session
from passlib.hash import pbkdf2_sha256
from contextlib import closing
import os
import psycopg2
import datetime
import markdown


# _____SQL SCRIPTS_____
DB_SCHEMA = """
DROP TABLE IF EXISTS entries;
CREATE TABLE entries (
    id serial PRIMARY KEY,
    title VARCHAR (127) NOT NULL,
    text TEXT NOT NULL,
    created TIMESTAMP NOT NULL
)
"""

DB_ENTRY_INSERT = """
INSERT INTO entries (title, text, created) VALUES (%s, %s, %s) returning id
"""


DB_ENTRIES_LIST = """
SELECT id, title, text, created FROM entries ORDER BY created DESC
"""

DB_ENTRY_GET = """
SELECT id, title, text, created FROM entries WHERE id = %s
"""

DB_UPDATE_ENTRY = """
UPDATE entries SET title = %s, text = %s WHERE id = %s
"""

# _____database functions_____
app = Flask(__name__)
app.config['DATABASE'] = os.environ.get(
    'DATABASE_URL', 'dbname=learning_journal'
)
app.config['ADMIN_USERNAME'] = os.environ.get(
    'ADMIN_USERNAME', 'admin'
)
app.config['ADMIN_PASSWORD'] = os.environ.get(
    'ADMIN_PASSWORD', pbkdf2_sha256.encrypt('admin')
)
app.config['SECRET_KEY'] = os.environ.get(
    'FLASK_SECRET_KEY', 'sooperseekritvaluenooneshouldknow'
)


def connect_db():
    """Return a connection to the configured database"""
    return psycopg2.connect(app.config['DATABASE'])


def init_db():
    """Initialize the database using DB_SCHEMA

    WARNING: executing this function will drop existing tables.
    """
    with closing(connect_db()) as db:
        db.cursor().execute(DB_SCHEMA)
        db.commit()


def get_database_connection():
    db = getattr(g, 'db', None)
    if db is None:
        g.db = db = connect_db()
    return db


@app.teardown_request
def teardown_request(exception):
    db = getattr(g, 'db', None)
    if db is not None:
        if exception and isinstance(exception, psycopg2.Error):
            # if there was a problem with the database, rollback any
            # existing transaction
            db.rollback()
        else:
            # otherwise, commit
            db.commit()
        db.close()


# _____journal methods_____
def write_entry(title, text):
    if not title or not text:
        raise ValueError("Title and text required for writing an entry")
    con = get_database_connection()
    cur = con.cursor()
    now = datetime.datetime.utcnow()
    return cur.execute(DB_ENTRY_INSERT, [title, text, now])


def get_all_entries():
    """return a list of all entries as dicts"""
    con = get_database_connection()
    cur = con.cursor()
    cur.execute(DB_ENTRIES_LIST)
    keys = ('id', 'title', 'text', 'created')
    myEntries = [dict(zip(keys, row)) for row in cur.fetchall()]
    for record in myEntries:
        record['text'] = markdown_text(record['text'])
    return myEntries


def get_one_entry(entry_id):
    """return the selected entry for editing"""
    con = get_database_connection()
    cur = con.cursor()
    cur.execute(DB_ENTRY_GET, [entry_id])
    return cur.fetchone()


def update_entry(title, text, entry_id):
    """update the entry selected for editing"""
    if session.get('logged_in', False):
        con = get_database_connection()
        cur = con.cursor()
        cur.execute(DB_UPDATE_ENTRY, [title, text, entry_id])


def do_login(username='', passwd=''):
    if username != app.config['ADMIN_USERNAME']:
        raise ValueError
    if not pbkdf2_sha256.verify(passwd, app.config['ADMIN_PASSWORD']):
        raise ValueError
    session['logged_in'] = True


def markdown_text(user_input):
    return markdown.markdown(user_input, extensions=['codehilite'])


# _____app methods_____
@app.route('/')
def show_entries():
    entries = get_all_entries()
    return render_template('list_entries.html', entries=entries)


@app.route('/add', methods=['POST'])
def add_entry():
    if session.get('logged_in', False):
        try:
            one_id = write_entry(request.form['title'], request.form['text'])
        except psycopg2.Error:
            # this will catch any errors generated by the database
            abort(500)
    return get_one_entry(one_id)


@app.route('/edit/<int:entry_id>', methods=['GET'])
def edit_entry(entry_id):
    if session.get('logged_in', False):
        try:
            edit_this = get_one_entry(entry_id)
        except psycopg2.Error:
            abort(500)
        else:
            return render_template('edit_entry.html', entries=edit_this)
    return redirect(url_for('show_entries'))


@app.route('/update_entry/<int:entry_id>', methods=['POST'])
def update(entry_id):
    if session.get('logged_in', False):
        try:
            title = request.form['title']
            text = request.form['text']
            update_entry(title, text, entry_id)
        except psycopg2.Error:
            abort(500)
    return redirect(url_for('show_entries'))


@app.route('/login', methods=['GET', 'POST'])
def login():
    error = None
    if request.method == 'POST':
        try:
            do_login(request.form['username'].encode('utf-8'),
                     request.form['password'].encode('utf-8'))
        except ValueError:
            error = "Login Failed"
        else:
            return redirect(url_for('show_entries'))
    return render_template('login.html', error=error)


@app.route('/logout')
def logout():
    session.pop('logged_in', None)
    return redirect(url_for('show_entries'))

if __name__ == '__main__':
    app.run(debug=True)
